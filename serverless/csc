#!/usr/bin/env bash

# init
envFile=${envFile:='./../.env'}
binServerless=${binServerless:='sls'}

# Usage
usage () {
    echo ""
    echo "  usage: . csc [--debug] [--deploy] [--inv] [--invl] [--ess] [--tunnel]"
    echo ""
    exit 1
}

# No param
[ "$1" == "" ] && usage

# No env file
if [ -f "${envFile}" ]; then
    source "${envFile}"
else
    echo "WARNING : No '.env' file."
fi

# Cmd handler
cmdDebug=0
cmdDeploy=0
cmdInvoke=0
cmdInvokeLocal=0
cmdTunnel=0
cmdEss=0

# Parameters reading :
while [ ! -z $1 ]; do
    case "$1" in
        --debug) cmdDebug=1 ;;
        --deploy) cmdDeploy=1 ;;
        --inv) cmdInvoke=1 ;;
        --invl) cmdInvokeLocal=1 ;;
        --tunnel) cmdTunnel=1 ;;
        --ess) cmdEss=1 ;;
        -h|--help) usage ;;
        *) echo "> Wrong options, just check the usage"; usage ;;
    esac
    shift
done

function checkVar () {
    [[ -z "$1" ]] && echo "ERROR : Missing environment variable : '$2'." && exit 1
}

function deploy() {
    ${binServerless} deploy
}

function tunnel() {
    local destPort=8080
    open "http://localhost:${destPort}/_plugin/kibana"
    ssh -L ${destPort}:${ES_ENDPOINT_DEV}:80 root@${ES_ALLOW_IP} -N
}

function invoke() {
    local arg='local'
    [ -z $1 ] && local arg=''
    serverless invoke ${arg} -f cscraper
}

function esSize() {
    curl "${ES_ENDPOINT_DEV}/_cat/shards/*?v"
    curl "${ES_ENDPOINT_DEV}/_cat/segments/*?v"
}

function getCloudFrontDomain() {
    ${binServerless} domains | grep WebAppCloudFrontDistributionOutput | awk -F':' '{print $3}'
}

function getCloudFrontIP() {
    getCloudFrontDomain
}

#
# Checks
#

checkVar "${S3_DNS}" "S3_DNS"
checkVar "${ES_ENDPOINT_DEV}" "ES_ENDPOINT_DEV"
checkVar "${ES_ALLOW_IP}" "ES_ALLOW_IP"
checkVar "${AWS_REGION}" "AWS_REGION"
checkVar "${AWS_ACCESS_KEY_ID}" "AWS_ACCESS_KEY_ID"
checkVar "${AWS_SECRET_ACCESS_KEY}" "AWS_SECRET_ACCESS_KEY"
checkVar "${CF_SSL_ARN}" "CF_SSL_ARN"
checkVar "${APP_RSS_FEEDS}" "APP_RSS_FEEDS"
checkVar "${APP_TITLE_REGEXP}" "APP_TITLE_REGEXP"

#
# Business logic here
#

if [[ ${cmdDebug} -eq 1 ]]; then
    export SLS_DEBUG=*
fi

if [[ ${cmdDeploy} -eq 1 ]]; then
    deploy
fi

if [[ ${cmdInvoke} -eq 1 ]]; then
    invoke
fi

if [[ ${cmdInvokeLocal} -eq 1 ]]; then
    invoke 'local'
fi

if [[ ${cmdEss} -eq 1 ]]; then
    esSize
fi

if [[ ${cmdTunnel} -eq 1 ]]; then
    tunnel
fi
